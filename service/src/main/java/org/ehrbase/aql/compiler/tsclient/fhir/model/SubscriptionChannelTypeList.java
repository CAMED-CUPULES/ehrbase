//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.02.26 at 01:33:12 PM CET 
//


package org.ehrbase.aql.compiler.tsclient.fhir.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SubscriptionChannelType-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SubscriptionChannelType-list">
 *   &lt;restriction base="{http://hl7.org/fhir}code-primitive">
 *     &lt;enumeration value="rest-hook"/>
 *     &lt;enumeration value="websocket"/>
 *     &lt;enumeration value="email"/>
 *     &lt;enumeration value="sms"/>
 *     &lt;enumeration value="message"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "SubscriptionChannelType-list")
@XmlEnum
public enum SubscriptionChannelTypeList {


    /**
     * Rest Hook
     * 
     */
    @XmlEnumValue("rest-hook")
    REST_HOOK("rest-hook"),

    /**
     * Websocket
     * 
     */
    @XmlEnumValue("websocket")
    WEBSOCKET("websocket"),

    /**
     * Email
     * 
     */
    @XmlEnumValue("email")
    EMAIL("email"),

    /**
     * SMS
     * 
     */
    @XmlEnumValue("sms")
    SMS("sms"),

    /**
     * Message
     * 
     */
    @XmlEnumValue("message")
    MESSAGE("message");
    private final java.lang.String value;

    SubscriptionChannelTypeList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static SubscriptionChannelTypeList fromValue(java.lang.String v) {
        for (SubscriptionChannelTypeList c: SubscriptionChannelTypeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
